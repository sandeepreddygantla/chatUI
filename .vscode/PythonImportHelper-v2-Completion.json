[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbeddings",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "SystemMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "RecursiveCharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "faiss",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "faiss",
        "description": "faiss",
        "detail": "faiss",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "class User(UserMixin):\n    def __init__(self, user_id, username, email, full_name):\n        self.id = user_id\n        self.user_id = user_id\n        self.username = username\n        self.email = email\n        self.full_name = full_name\n    def get_id(self):\n        return self.user_id\n@login_manager.user_loader",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def load_user(user_id):\n    \"\"\"Load user for Flask-Login\"\"\"\n    if processor:\n        user = processor.vector_db.get_user_by_id(user_id)\n        if user:\n            return User(user.user_id, user.username, user.email, user.full_name)\n    return None\ndef initialize_processor():\n    \"\"\"Initialize the document processor\"\"\"\n    global processor",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "initialize_processor",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def initialize_processor():\n    \"\"\"Initialize the document processor\"\"\"\n    global processor\n    try:\n        logger.info(\"Initializing Enhanced Meeting Document Processor...\")\n        processor = EnhancedMeetingDocumentProcessor(chunk_size=1000, chunk_overlap=200)\n        logger.info(\"Processor initialized successfully\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to initialize processor: {e}\")",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def register():\n    \"\"\"User registration\"\"\"\n    if request.method == 'GET':\n        return render_template('register.html')\n    try:\n        data = request.get_json()\n        username = data.get('username', '').strip()\n        email = data.get('email', '').strip()\n        full_name = data.get('full_name', '').strip()\n        password = data.get('password', '')",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def login():\n    \"\"\"User login\"\"\"\n    if request.method == 'GET':\n        return render_template('login.html')\n    try:\n        data = request.get_json()\n        username = data.get('username', '').strip()\n        password = data.get('password', '')\n        if not username or not password:\n            return jsonify({'success': False, 'error': 'Username and password are required'}), 400",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def logout():\n    \"\"\"User logout\"\"\"\n    username = current_user.username\n    logout_user()\n    logger.info(f\"User logged out: {username}\")\n    return jsonify({'success': True, 'message': 'Logged out successfully'})\n@app.route('/api/auth/status')\ndef auth_status():\n    \"\"\"Check authentication status\"\"\"\n    if current_user.is_authenticated:",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "auth_status",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def auth_status():\n    \"\"\"Check authentication status\"\"\"\n    if current_user.is_authenticated:\n        return jsonify({\n            'authenticated': True,\n            'user': {\n                'user_id': current_user.user_id,\n                'username': current_user.username,\n                'email': current_user.email,\n                'full_name': current_user.full_name",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def index():\n    \"\"\"Main chat interface\"\"\"\n    if not current_user.is_authenticated:\n        return redirect(url_for('login'))\n    return render_template('chat.html')\n@app.route('/api/upload', methods=['POST'])\n@login_required\ndef upload_files():\n    \"\"\"Handle file uploads with detailed result tracking\"\"\"\n    try:",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "upload_files",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def upload_files():\n    \"\"\"Handle file uploads with detailed result tracking\"\"\"\n    try:\n        logger.info(\"Upload request received\")\n        if 'files' not in request.files:\n            logger.error(\"No files in request\")\n            return jsonify({'success': False, 'error': 'No files provided'}), 400\n        files = request.files.getlist('files')\n        if not files or all(f.filename == '' for f in files):\n            logger.error(\"No files selected\")",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "chat",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def chat():\n    \"\"\"Handle chat messages\"\"\"\n    try:\n        data = request.get_json()\n        message = data.get('message', '').strip()\n        document_ids = data.get('document_ids', None)  # Document filtering\n        project_id = data.get('project_id', None)  # Single project filtering (legacy)\n        project_ids = data.get('project_ids', None)  # Multiple project filtering (enhanced)\n        meeting_ids = data.get('meeting_ids', None)  # Meeting filtering\n        date_filters = data.get('date_filters', None)  # Date filtering",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "get_documents",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def get_documents():\n    \"\"\"Get list of all documents for file selection\"\"\"\n    try:\n        logger.info(\"Documents request received\")\n        if not processor:\n            logger.error(\"Processor not initialized for documents\")\n            return jsonify({'success': False, 'error': 'System not initialized'}), 500\n        user_id = current_user.user_id\n        documents = processor.vector_db.get_all_documents(user_id)\n        return jsonify({",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "get_projects",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def get_projects():\n    \"\"\"Get all projects for the current user\"\"\"\n    try:\n        logger.info(\"Projects request received\")\n        if not processor:\n            logger.error(\"Processor not initialized for projects\")\n            return jsonify({'success': False, 'error': 'System not initialized'}), 500\n        user_id = current_user.user_id\n        projects = processor.vector_db.get_user_projects(user_id)\n        # Convert projects to dictionaries",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "create_project",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def create_project():\n    \"\"\"Create a new project\"\"\"\n    try:\n        data = request.get_json()\n        project_name = data.get('project_name', '').strip()\n        description = data.get('description', '').strip()\n        if not project_name:\n            return jsonify({'success': False, 'error': 'Project name is required'}), 400\n        if not processor:\n            return jsonify({'success': False, 'error': 'System not initialized'}), 500",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "get_meetings",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def get_meetings():\n    \"\"\"Get all meetings for the current user\"\"\"\n    try:\n        logger.info(\"Meetings request received\")\n        if not processor:\n            logger.error(\"Processor not initialized for meetings\")\n            return jsonify({'success': False, 'error': 'System not initialized'}), 500\n        user_id = current_user.user_id\n        meetings = processor.vector_db.get_user_meetings(user_id)\n        # Convert meetings to dictionaries",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "get_stats",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def get_stats():\n    \"\"\"Get system statistics\"\"\"\n    try:\n        logger.info(\"Stats request received\")\n        if not processor:\n            logger.error(\"Processor not initialized for stats\")\n            return jsonify({'success': False, 'error': 'System not initialized'}), 500\n        stats = processor.get_meeting_statistics()\n        if \"error\" in stats:\n            logger.error(f\"Error in stats: {stats['error']}\")",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "refresh_system",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def refresh_system():\n    \"\"\"Refresh the system\"\"\"\n    try:\n        logger.info(\"System refresh requested\")\n        if processor:\n            processor.refresh_clients()\n            logger.info(\"System refreshed successfully\")\n            return jsonify({'success': True, 'message': 'System refreshed successfully'})\n        else:\n            logger.error(\"Processor not initialized for refresh\")",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "test_system",
        "kind": 2,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "def test_system():\n    \"\"\"Test endpoint to check if system is working\"\"\"\n    try:\n        status = {\n            'processor_initialized': processor is not None,\n            'vector_db_available': False,\n            'vector_size': 0\n        }\n        if processor:\n            try:",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Import your existing classes\ntry:\n    from meeting_processor import EnhancedMeetingDocumentProcessor\n    logger.info(\"Successfully imported meeting_processor\")\nexcept ImportError as e:\n    logger.error(f\"Failed to import meeting_processor: {e}\")\n    logger.error(\"Make sure meeting_processor.py is in the same directory\")\n    exit(1)\n# Create Flask app with proper static folder configuration",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "app = Flask(__name__, \n           static_folder='static',  # Explicitly set static folder\n           static_url_path='/static',  # Set static URL path\n           template_folder='templates')  # Set template folder\napp.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', secrets.token_hex(32))\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB max file size\napp.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=24)  # 24 hour session\n# Configure Flask-Login\nlogin_manager = LoginManager()",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', secrets.token_hex(32))\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB max file size\napp.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=24)  # 24 hour session\n# Configure Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Please log in to access this page.'\nlogin_manager.login_message_category = 'info'",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB max file size\napp.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=24)  # 24 hour session\n# Configure Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Please log in to access this page.'\nlogin_manager.login_message_category = 'info'\n# Global processor instance",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "app.config['MAX_CONTENT_LENGTH']",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB max file size\napp.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=24)  # 24 hour session\n# Configure Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Please log in to access this page.'\nlogin_manager.login_message_category = 'info'\n# Global processor instance\nprocessor = None",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "app.config['PERMANENT_SESSION_LIFETIME']",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=24)  # 24 hour session\n# Configure Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Please log in to access this page.'\nlogin_manager.login_message_category = 'info'\n# Global processor instance\nprocessor = None\n# User class for Flask-Login",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Please log in to access this page.'\nlogin_manager.login_message_category = 'info'\n# Global processor instance\nprocessor = None\n# User class for Flask-Login\nclass User(UserMixin):\n    def __init__(self, user_id, username, email, full_name):",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "login_manager.login_view",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "login_manager.login_view = 'login'\nlogin_manager.login_message = 'Please log in to access this page.'\nlogin_manager.login_message_category = 'info'\n# Global processor instance\nprocessor = None\n# User class for Flask-Login\nclass User(UserMixin):\n    def __init__(self, user_id, username, email, full_name):\n        self.id = user_id\n        self.user_id = user_id",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "login_manager.login_message",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "login_manager.login_message = 'Please log in to access this page.'\nlogin_manager.login_message_category = 'info'\n# Global processor instance\nprocessor = None\n# User class for Flask-Login\nclass User(UserMixin):\n    def __init__(self, user_id, username, email, full_name):\n        self.id = user_id\n        self.user_id = user_id\n        self.username = username",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "login_manager.login_message_category",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "login_manager.login_message_category = 'info'\n# Global processor instance\nprocessor = None\n# User class for Flask-Login\nclass User(UserMixin):\n    def __init__(self, user_id, username, email, full_name):\n        self.id = user_id\n        self.user_id = user_id\n        self.username = username\n        self.email = email",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "flask_app",
        "description": "flask_app",
        "peekOfCode": "processor = None\n# User class for Flask-Login\nclass User(UserMixin):\n    def __init__(self, user_id, username, email, full_name):\n        self.id = user_id\n        self.user_id = user_id\n        self.username = username\n        self.email = email\n        self.full_name = full_name\n    def get_id(self):",
        "detail": "flask_app",
        "documentation": {}
    },
    {
        "label": "DocumentChunk",
        "kind": 6,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "class DocumentChunk:\n    \"\"\"Structure to hold document chunk information\"\"\"\n    chunk_id: str\n    document_id: str\n    filename: str\n    chunk_index: int\n    content: str\n    start_char: int\n    end_char: int\n    embedding: Optional[np.ndarray] = None",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "class User:\n    \"\"\"Structure to hold user information\"\"\"\n    user_id: str\n    username: str\n    email: str\n    full_name: str\n    password_hash: str\n    created_at: datetime\n    last_login: Optional[datetime] = None\n    is_active: bool = True",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "class Project:\n    \"\"\"Structure to hold project information\"\"\"\n    project_id: str\n    user_id: str\n    project_name: str\n    description: str\n    created_at: datetime\n    is_active: bool = True\n@dataclass\nclass Meeting:",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "Meeting",
        "kind": 6,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "class Meeting:\n    \"\"\"Structure to hold meeting information\"\"\"\n    meeting_id: str\n    user_id: str\n    project_id: str\n    meeting_name: str\n    meeting_date: datetime\n    created_at: datetime\n@dataclass\nclass MeetingDocument:",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "MeetingDocument",
        "kind": 6,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "class MeetingDocument:\n    \"\"\"Structure to hold meeting document information\"\"\"\n    document_id: str\n    filename: str\n    date: datetime\n    title: str\n    content: str\n    content_summary: str  # Condensed summary for metadata\n    main_topics: List[str]\n    past_events: List[str]",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "VectorDatabase",
        "kind": 6,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "class VectorDatabase:\n    \"\"\"Vector database using FAISS for similarity search and SQLite for metadata\"\"\"\n    def __init__(self, db_path: str = \"meeting_documents.db\", index_path: str = \"vector_index.faiss\"):\n        self.db_path = db_path\n        self.index_path = index_path\n        self.dimension = 3072  # text-embedding-3-large dimension\n        self.index = None\n        self.chunk_metadata = {}\n        self.document_metadata = {}\n        self._init_database()",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "EnhancedMeetingDocumentProcessor",
        "kind": 6,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "class EnhancedMeetingDocumentProcessor:\n    \"\"\"Enhanced Meeting Document Processor with Vector Database Support\"\"\"\n    def __init__(self, chunk_size: int = 1000, chunk_overlap: int = 200):\n        \"\"\"Initialize the enhanced processor\"\"\"\n        global llm, embedding_model, access_token\n        self.llm = llm\n        self.embedding_model = embedding_model\n        self.access_token = access_token\n        self.token_expiry = datetime.now() + timedelta(hours=1)\n        # Text splitter for chunking",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "get_access_token",
        "kind": 2,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "def get_access_token():\n    \"\"\"\n    Dummy function to maintain compatibility with existing code.\n    OpenAI API uses API key authentication, not tokens.\n    \"\"\"\n    return \"dummy_token_for_compatibility\"\n# --- OpenAI LLM Client ---\ndef get_llm(access_token: str = None):\n    \"\"\"\n    Get OpenAI LLM client. access_token parameter is kept for compatibility",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "get_llm",
        "kind": 2,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "def get_llm(access_token: str = None):\n    \"\"\"\n    Get OpenAI LLM client. access_token parameter is kept for compatibility\n    but not used since OpenAI uses API key authentication.\n    \"\"\"\n    # Get fresh API key each time to avoid caching issues\n    current_api_key = os.getenv(\"OPENAI_API_KEY\")\n    if not current_api_key:\n        raise ValueError(\"OPENAI_API_KEY environment variable not set\")\n    return ChatOpenAI(",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "get_embedding_model",
        "kind": 2,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "def get_embedding_model(access_token: str = None):\n    \"\"\"\n    Get OpenAI embedding model. access_token parameter is kept for compatibility\n    but not used since OpenAI uses API key authentication.\n    \"\"\"\n    # Get fresh API key each time to avoid caching issues\n    current_api_key = os.getenv(\"OPENAI_API_KEY\")\n    if not current_api_key:\n        raise ValueError(\"OPENAI_API_KEY environment variable not set\")\n    return OpenAIEmbeddings(",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "def main():\n    \"\"\"Main function for Meeting Document AI System with OpenAI\"\"\"\n    print(\"🚀 Meeting Document AI System v3.0 (OpenAI Edition)\")\n    print(\"📊 Features: Vector Database, Hybrid Search, Chunking Support\")\n    print(\"🔑 Using OpenAI API (GPT-4o + text-embedding-3-large)\")\n    print(\"=\" * 60)\n    try:\n        # Check OpenAI API key\n        if not openai_api_key:\n            print(\"❌ Error: OPENAI_API_KEY environment variable not set\")",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Check API key availability at startup\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\nif not openai_api_key:\n    raise ValueError(\"Please set OPENAI_API_KEY environment variable\")\nlogger.info(f\"OpenAI API key loaded: {openai_api_key[:15]}...{openai_api_key[-10:]}\")\nproject_id = \"openai-meeting-processor\"  # Simple project ID for personal use\ntiktoken_cache_dir = os.path.abspath(\"tiktoken_cache\")\nos.environ[\"TIKTOKEN_CACHE_DIR\"] = tiktoken_cache_dir\n# --- Dummy Auth Function (for compatibility) ---",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "openai_api_key",
        "kind": 5,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "openai_api_key = os.getenv(\"OPENAI_API_KEY\")\nif not openai_api_key:\n    raise ValueError(\"Please set OPENAI_API_KEY environment variable\")\nlogger.info(f\"OpenAI API key loaded: {openai_api_key[:15]}...{openai_api_key[-10:]}\")\nproject_id = \"openai-meeting-processor\"  # Simple project ID for personal use\ntiktoken_cache_dir = os.path.abspath(\"tiktoken_cache\")\nos.environ[\"TIKTOKEN_CACHE_DIR\"] = tiktoken_cache_dir\n# --- Dummy Auth Function (for compatibility) ---\ndef get_access_token():\n    \"\"\"",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "project_id",
        "kind": 5,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "project_id = \"openai-meeting-processor\"  # Simple project ID for personal use\ntiktoken_cache_dir = os.path.abspath(\"tiktoken_cache\")\nos.environ[\"TIKTOKEN_CACHE_DIR\"] = tiktoken_cache_dir\n# --- Dummy Auth Function (for compatibility) ---\ndef get_access_token():\n    \"\"\"\n    Dummy function to maintain compatibility with existing code.\n    OpenAI API uses API key authentication, not tokens.\n    \"\"\"\n    return \"dummy_token_for_compatibility\"",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "tiktoken_cache_dir",
        "kind": 5,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "tiktoken_cache_dir = os.path.abspath(\"tiktoken_cache\")\nos.environ[\"TIKTOKEN_CACHE_DIR\"] = tiktoken_cache_dir\n# --- Dummy Auth Function (for compatibility) ---\ndef get_access_token():\n    \"\"\"\n    Dummy function to maintain compatibility with existing code.\n    OpenAI API uses API key authentication, not tokens.\n    \"\"\"\n    return \"dummy_token_for_compatibility\"\n# --- OpenAI LLM Client ---",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "os.environ[\"TIKTOKEN_CACHE_DIR\"]",
        "kind": 5,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "os.environ[\"TIKTOKEN_CACHE_DIR\"] = tiktoken_cache_dir\n# --- Dummy Auth Function (for compatibility) ---\ndef get_access_token():\n    \"\"\"\n    Dummy function to maintain compatibility with existing code.\n    OpenAI API uses API key authentication, not tokens.\n    \"\"\"\n    return \"dummy_token_for_compatibility\"\n# --- OpenAI LLM Client ---\ndef get_llm(access_token: str = None):",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 5,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "access_token = get_access_token()\nembedding_model = get_embedding_model(access_token)\nllm = get_llm(access_token)\n@dataclass\nclass DocumentChunk:\n    \"\"\"Structure to hold document chunk information\"\"\"\n    chunk_id: str\n    document_id: str\n    filename: str\n    chunk_index: int",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "embedding_model",
        "kind": 5,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "embedding_model = get_embedding_model(access_token)\nllm = get_llm(access_token)\n@dataclass\nclass DocumentChunk:\n    \"\"\"Structure to hold document chunk information\"\"\"\n    chunk_id: str\n    document_id: str\n    filename: str\n    chunk_index: int\n    content: str",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "meeting_processor",
        "description": "meeting_processor",
        "peekOfCode": "llm = get_llm(access_token)\n@dataclass\nclass DocumentChunk:\n    \"\"\"Structure to hold document chunk information\"\"\"\n    chunk_id: str\n    document_id: str\n    filename: str\n    chunk_index: int\n    content: str\n    start_char: int",
        "detail": "meeting_processor",
        "documentation": {}
    },
    {
        "label": "sanitize_project_name",
        "kind": 2,
        "importPath": "migrate_to_project_folders",
        "description": "migrate_to_project_folders",
        "peekOfCode": "def sanitize_project_name(project_name):\n    \"\"\"Sanitize project name for folder creation\"\"\"\n    if not project_name:\n        return \"Default_Project\"\n    # Replace spaces and special characters\n    sanitized = project_name.replace(\" \", \"_\").replace(\"/\", \"_\").replace(\"\\\\\", \"_\")\n    sanitized = \"\".join(c for c in sanitized if c.isalnum() or c in (\"_\", \"-\"))\n    return sanitized if sanitized else \"Default_Project\"\ndef get_project_name_by_id(cursor, project_id):\n    \"\"\"Get project name by project ID\"\"\"",
        "detail": "migrate_to_project_folders",
        "documentation": {}
    },
    {
        "label": "get_project_name_by_id",
        "kind": 2,
        "importPath": "migrate_to_project_folders",
        "description": "migrate_to_project_folders",
        "peekOfCode": "def get_project_name_by_id(cursor, project_id):\n    \"\"\"Get project name by project ID\"\"\"\n    cursor.execute(\"SELECT project_name FROM projects WHERE project_id = ?\", (project_id,))\n    result = cursor.fetchone()\n    return result[0] if result else \"Default Project\"\ndef migrate_existing_files():\n    \"\"\"Migrate existing files to project-folder structure\"\"\"\n    db_path = \"meeting_documents.db\"\n    if not os.path.exists(db_path):\n        logger.error(f\"Database file {db_path} not found\")",
        "detail": "migrate_to_project_folders",
        "documentation": {}
    },
    {
        "label": "migrate_existing_files",
        "kind": 2,
        "importPath": "migrate_to_project_folders",
        "description": "migrate_to_project_folders",
        "peekOfCode": "def migrate_existing_files():\n    \"\"\"Migrate existing files to project-folder structure\"\"\"\n    db_path = \"meeting_documents.db\"\n    if not os.path.exists(db_path):\n        logger.error(f\"Database file {db_path} not found\")\n        return False\n    # Connect to database\n    conn = sqlite3.connect(db_path)\n    cursor = conn.cursor()\n    try:",
        "detail": "migrate_to_project_folders",
        "documentation": {}
    },
    {
        "label": "cleanup_empty_folders",
        "kind": 2,
        "importPath": "migrate_to_project_folders",
        "description": "migrate_to_project_folders",
        "peekOfCode": "def cleanup_empty_folders():\n    \"\"\"Clean up empty user folders after migration\"\"\"\n    meeting_docs_path = Path(\"meeting_documents\")\n    if not meeting_docs_path.exists():\n        return\n    # Find all user folders\n    for user_folder in meeting_docs_path.glob(\"user_*\"):\n        if user_folder.is_dir():\n            try:\n                # Check if folder is empty (no files, only project folders)",
        "detail": "migrate_to_project_folders",
        "documentation": {}
    },
    {
        "label": "verify_migration",
        "kind": 2,
        "importPath": "migrate_to_project_folders",
        "description": "migrate_to_project_folders",
        "peekOfCode": "def verify_migration():\n    \"\"\"Verify that migration was successful\"\"\"\n    db_path = \"meeting_documents.db\"\n    if not os.path.exists(db_path):\n        logger.error(f\"Database file {db_path} not found\")\n        return False\n    conn = sqlite3.connect(db_path)\n    cursor = conn.cursor()\n    try:\n        # Check for documents without folder_path",
        "detail": "migrate_to_project_folders",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "migrate_to_project_folders",
        "description": "migrate_to_project_folders",
        "peekOfCode": "def main():\n    \"\"\"Main migration function\"\"\"\n    logger.info(\"Starting migration to project-folder structure\")\n    logger.info(\"=\" * 60)\n    # Backup database before migration\n    backup_db()\n    # Run migration\n    if migrate_existing_files():\n        logger.info(\"Migration completed successfully\")\n        # Verify migration",
        "detail": "migrate_to_project_folders",
        "documentation": {}
    },
    {
        "label": "backup_db",
        "kind": 2,
        "importPath": "migrate_to_project_folders",
        "description": "migrate_to_project_folders",
        "peekOfCode": "def backup_db():\n    \"\"\"Create a backup of the database before migration\"\"\"\n    db_path = \"meeting_documents.db\"\n    if os.path.exists(db_path):\n        backup_path = f\"meeting_documents_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db\"\n        shutil.copy2(db_path, backup_path)\n        logger.info(f\"Database backed up to {backup_path}\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "migrate_to_project_folders",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrate_to_project_folders",
        "description": "migrate_to_project_folders",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef sanitize_project_name(project_name):\n    \"\"\"Sanitize project name for folder creation\"\"\"\n    if not project_name:\n        return \"Default_Project\"\n    # Replace spaces and special characters\n    sanitized = project_name.replace(\" \", \"_\").replace(\"/\", \"_\").replace(\"\\\\\", \"_\")\n    sanitized = \"\".join(c for c in sanitized if c.isalnum() or c in (\"_\", \"-\"))\n    return sanitized if sanitized else \"Default_Project\"\ndef get_project_name_by_id(cursor, project_id):",
        "detail": "migrate_to_project_folders",
        "documentation": {}
    },
    {
        "label": "test_detect_project_summary_query",
        "kind": 2,
        "importPath": "test_comprehensive_summary",
        "description": "test_comprehensive_summary",
        "peekOfCode": "def test_detect_project_summary_query():\n    \"\"\"Test the project summary detection logic\"\"\"\n    # Simulate the detection method\n    def detect_project_summary_query(query: str) -> bool:\n        \"\"\"Detect if the query is asking for a comprehensive project summary\"\"\"\n        project_summary_keywords = [\n            'project summary', 'project summaries', 'summarize project', 'summarize the project',\n            'summary of project', 'summary of all files', 'all files summary', 'comprehensive summary',\n            'summarize all meetings', 'all meetings summary', 'overall project', 'entire project',\n            'project overview', 'complete summary', 'full summary', 'all documents summary',",
        "detail": "test_comprehensive_summary",
        "documentation": {}
    },
    {
        "label": "test_file_processing_strategy",
        "kind": 2,
        "importPath": "test_comprehensive_summary",
        "description": "test_comprehensive_summary",
        "peekOfCode": "def test_file_processing_strategy():\n    \"\"\"Test the file count strategy logic\"\"\"\n    def get_processing_strategy(file_count: int) -> str:\n        \"\"\"Determine processing strategy based on file count\"\"\"\n        if file_count <= 15:\n            return \"individual\"\n        elif file_count <= 50:\n            return \"batching\"\n        else:\n            return \"hierarchical\"",
        "detail": "test_comprehensive_summary",
        "documentation": {}
    },
    {
        "label": "test_comprehensive_summary_features",
        "kind": 2,
        "importPath": "test_comprehensive_summary",
        "description": "test_comprehensive_summary",
        "peekOfCode": "def test_comprehensive_summary_features():\n    \"\"\"Test the comprehensive summary features\"\"\"\n    print(\"\\nTesting Comprehensive Summary Features:\")\n    print(\"=\" * 50)\n    # Test the key features that were implemented\n    features = [\n        \"✅ Project summary detection with 16 keyword patterns\",\n        \"✅ Tier 1 processing: Individual files (≤15 files)\",\n        \"✅ Tier 2 processing: Batch processing (16-50 files)\",\n        \"✅ Tier 3 processing: Hierarchical processing (50+ files)\",",
        "detail": "test_comprehensive_summary",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_comprehensive_summary",
        "description": "test_comprehensive_summary",
        "peekOfCode": "def main():\n    \"\"\"Run all tests\"\"\"\n    print(\"🚀 Testing Comprehensive Project Summary Implementation\")\n    print(\"=\" * 70)\n    test1 = test_detect_project_summary_query()\n    test2 = test_file_processing_strategy()\n    test3 = test_comprehensive_summary_features()\n    print(\"\\n\" + \"=\" * 70)\n    if test1 and test2 and test3:\n        print(\"🎉 ALL TESTS PASSED! Implementation is ready for use.\")",
        "detail": "test_comprehensive_summary",
        "documentation": {}
    }
]